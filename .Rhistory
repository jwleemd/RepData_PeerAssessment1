install.packages("propagate")
require(propagate)
set.seed(275)
observations <- rnorm(10000, 5)
mean(observations)
distTested <- fitDistr(observations)
par(mfrow=c(1,1))
distTested <- fitDistr(observations)
distTested$aic
EXPR <- expression(x^(3*y)-1)
x <- c(6,0.1)
y <- c(2,0.1)
DF <- cbind(x,y)
DF
RES <- propagate(expr=EXPR, data=DF, type="stat", do.sim=TRUE, verbose=TRUE)
testedDistrEXPR <- fitDistr(RES)
testedDistrEXPR$aic
female.heights <- c(117,162,143,120,183,175,147,145,165,167,179,116)
mean(female.heights)
wilcox.test(female.heights, mu=171)
wilcox.test(female.heights, mu=171, conf.int=TRUE, conf.level=0.99)
f <- numeric(10000)
for (i in 1:10000) {
f[i] <- mean(sample(female.heights, replace=T))
}
hist(f)
f2 <- replicate(10000, mean(sample(female.heights, replace=T)))
hist(f2)
sample(female.heights)
sample(female.heights)
t.test(female.heights, mu=171)
var.test(probeA, probeB)
head(df)
kruskal.test(expr_probeA ~ drugA_response, data=df)
x <- list(a=1:5, b=rnorm(10))
x
lapply(x, mean)
sapply(x, mean)
x <- 1:4
lapply(1:4, runif)
x <- 1:4
lapply(x, runif, min=0, max=10)
x <- list(a=matrix(1:4, 2, 2), b=matrix(1:6,3,2))
x
lapply(x, function(elt) elt[,1])
x <- matrix(rnorm(200),20,10)
apply(x, 1, quantile, probs=c(0.25,0.75))
a <- array(rnorm(2*2*10),c(2,2,10))
apply(a, c(1,2), mean)
rowMeans(a, dims=2)
mapply(rep, 1:4, 4:1)
unlist(mapply(rep, 1:4, 4:1))
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5,1,2)
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1:5)
mapply(noise, 1:5, 1:5, 2)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3, 10)
f
tapply(x, f, mean)
tapply(x, f, range)
split(x, f)
lapply(split(x, f), mean)
sapply(split(x, f), mean)
tapply(x, f, mean)
require(datasets)
head(airquality)
s <- split(airquality, Month)
s <- split(airquality, airquality$Month)
head(s)
lapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")], na.rm=T))
x <- rnorm(10)
f1 <- gl(2,5)
f1
f2 <- gl(5,2)
f2
interaction(f1, f2)
str(split(x, list(f1, f2)))
head(x)
str(split(x, list(f1, f2), drop=TRUE))
waiting.period <- c(3,5,4,5.5,3.5,2.5,3,5,4.5,3,3.5)
above4.hrs <- ifelse(waiting.period > 4, "yes","no")
above4hs.table <- table(above4.hrs)
above4hs.table
prop.test(4, n=11, p=0.5, alternative="two.sided", correct=FALSE)
prop.test(4, n=11, p=0.5, alternative="two.sided", correct=TRUE)
binom.test(4, n=11, p=0.5)
require("affy")
load(url("http://www.ebi.ac.uk/arrayexpress/files/E-GEOD-19577/E-GEOD-19577.eSet.r"))
MLLpartner.ds <- study
AEsetnorm <- rma(MLLpartner.ds)
probeA <- as.numeric(exprs(AEsetnorm)[1,])
probeA <- setNames(probeA, colnames(exprs(AEsetnorm)))
probeB <- as.numeric(exprs(AEsetnorm)[2,])
probeB <- setNames(probeB, colnames(exprs(AEsetnorm)))
t.test(probeA, probeB)
wilcox.test(probeA, probeB)
wilcox.test(probeA, probeB, paired=T)
promoted.employees <- c(16, 63)
total.employees <- c(430, 1053)
prop.test(promoted.employees, total.employees)
trait.counts <- matrix(c(24,14,11,47),nrow=2)
colnames(trait.counts ) <- c("Blue eyes","Brown eyes")
rownames(trait.counts) <- c("Blond hair", "Dark brown hair")
trait.counts
chisq.test(trait.counts)
data.counts <- matrix(c(7,5,2,6), nrow=2)
data.counts
fisher.test(data.counts)
install.packages("quantmod")
require(quantmod)
fbstock <-getSymbols("FB", src="yahoo", from= '2012-06-18', end='2014-11-28', auto.assign=FALSE)
fbstock
head(fbstock)
plot.ts(as.ts(fbstock[, 4:5]), main="FACEBOOK Stock Information from 2012-06-18 to 2014-11-28")
chartSeries(fbstock[, 4:5], theme="white", up.col="black")
require(tseries)
install.packages("tseries")
require(tseries)
adf.test(fbstock[,4])
kpss.test(fbstock[,4])
rm(list=ls())
plot(c(3,4),c(7,4))
lines(c(3,3),c(7,4))
lines(c(3,4),c(4,4))
text(2,5.5,"delta y")
text(3.5,3.5,"delta x")
text(2,5.5,"delta y")
plot(c(3,4),c(7,4))
lines(c(3,3),c(7,4))
lines(c(3,4),c(4,4))
lines(c(3,4),c(7,4), lwd=3, col="red")
text(2,5.5,"delta y")
text(3.5,3.5,"delta x")
?text
data(RNA_ng)
gapdh.qPCR <- read.table(header=TRUE, text='
GAPDH  RNA_ng  A1  A2  A3
std_curve  50  16.5  16.7  16.7
std_curve  10  19.3  19.2  19
std_curve  2  21.7  21.5  21.2
std_curve  0.4  24.5  24.1  23.5
std_curve  0.08  26.7  27  26.5
std_curve  0.016  36.5  36.4  37.2
')
gapdh.qPCR
str(gapdh.qPCR)
require(reshape2)
gapdh.qPCR <- melt(gapdh.qPCR, id.vars=c("GAPDH","RNA_ng"), value.name="Ct_Value")
heaD(gapdh.qPCR)
head(gapdh.qPCR)
attach(gapdh.qPCR)
names(gapdh.qPCR)
par(mfrow=c(1,2))
plot(RNA_ng, Ct_Value)
plot(log(RNA_ng),Ct_Value)
lm(Ct_Value ~ log(RNA_ng))
model <- lm(Ct_Value ~ log(RNA_ng))
summary(model)
summary.aov(model)
par(mfrow=c(2,2))
plot(model)
RNA_ng[18]
Ct_Value[18]
model2 <- update(model, subset(Ct_Value != 37.2))
model2 <- update(model, subset(Ct_Value != 37.2))
model2 <- update(model, subset=(Ct_Value != 37.2))
summary(model2)
model2
patient.fatigue <- read.table(header=TRUE, text='
patients fatigue drugA_dose
1         1     low        0.2
2         2     low        0.2
3         3     med        0.2
4         4     med        0.2
5         5     med        0.2
6         6     low        0.4
7         7     low        0.4
8         8     low        0.4
9         9     med        0.4
10       10     med        0.4
11       11     med        0.8
12       12    high        0.8
13       13     med        0.8
14       14     med        0.8
15       15    high        0.8
16       16    high        1.2
17       17    high        1.2
18       18    high        1.2
19       19    high        1.2
20       20     med        1.2 ')
save.image("chapter3.RData")
head(iris)
mean(iris$Sepal.Length[iris$Species=="virginica"])
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
s <- tapply(mtcars$hp, mtcars$cyl, mean)
s
s[3] - s[1]
patient.fatigue <- read.table(header=TRUE, text='
patients fatigue drugA_dose
1         1     low        0.2
2         2     low        0.2
3         3     med        0.2
4         4     med        0.2
5         5     med        0.2
6         6     low        0.4
7         7     low        0.4
8         8     low        0.4
9         9     med        0.4
10       10     med        0.4
11       11     med        0.8
12       12    high        0.8
13       13     med        0.8
14       14     med        0.8
15       15    high        0.8
16       16    high        1.2
17       17    high        1.2
18       18    high        1.2
19       19    high        1.2
20       20     med        1.2 ')
head(patient.fatigue)
attach(patient.fatigue)
aov(drugA_dose ~ fatigue)
summary(aov(drugA_dose ~ fatigue))
model <- aov(drugA_dose ~ fatigue)
plot(model)
par(mfrow=c(2,2))
plot(model)
modelA <- model
rm(model)
modelB <- update(modelA, subset=(patients != 20))
summary(modelB)
summary.lm(modelB)
patient.sex <- as.factor(c("F", "F", "F", "M", "M", "F", "M", "M", "M", "F", "F", "M", "M", "F", "F", "F", "M", "M", "F", "M"))
modelC = aov(drugA_dose ~ fatigue * patient.sex)
summary(modelC)
anova(modelA, modelC)
cmp1.ld <- read.table(header=TRUE, text='
lethaldose sex numdead numalive
1           0   M       1       19
2           1   M       3       17
3           2   M       9       11
4           3   M      14        6
5           4   M      17        3
6           5   M      20        0
7           0   F       0       20
8           1   F       2       18
9           2   F       2       18
10          3   F       3       17
11          4   F       4       16
12          5   F       6       14
')
detach(patient.fatigue)
attach(cmp1.ld)
head(cmp1.ld)
proportion_dead <- numdead/20
proportion_dead
plot(proportion_dead ~ lethaldose, pch=as.character(sex))
par(mfrow=c(1,1))
plot(proportion_dead ~ lethaldose, pch=as.character(sex))
counts <- cbind(numdead, numalive)
counts
cmp1.ld.model <- glm(counts ~ sex * lethaldose, family=binomial)
summary(cmp1.ld.model)
3.939/8
cmp1.ld.model <- glm(counts ~ sex * lethaldose, family=quasibinomial)
summary(cmp1.ld.model)
cmp1.ld.model <- glm(counts ~ sex * lethaldose, family=binomial)
cmp1.ld.model2 <- glm(counts ~ sex * lethaldose, family=quasibinomial)
cmp1.ld.model3 <- update(cmp1.ld.model, ~. - sex:lethaldose)
summary(cmp1.ld.model3)
11.975/9
anova(cmp1.ld.model, cmp1.ld.model3, test="Chi")
pregnancies <- sample(0:25, 300,replace=T)
glucose <- sample(65:200, 300,replace=T)
pressure <-  sample(50:120, 300,replace=T)
insulinD <- abs(rnorm(150, 450, 100))
insulinN <- abs(rnorm(150, 65, 75))
insulin <- c(insulinD, insulinN)
weight <- sample(20:70, 300,replace=T)
require(mgcv)
mouse.data.gam <- gam(pregnancies ~ s(glucose) + s(pressure) + s(insulin) + s(weight))
summary(mouse.data.gam)
par(mfrow=c(2,2))
plot(mouse.data.gam)
set.seed(459)
Bluegill.length <- sample(seq(15, 22.5, by=0.5), 50, replace=T)
Bluegill.weight <- sample(seq(0.2, 0.8, by=0.05), 50, replace=T)
Bowfin.length <- sample(seq(46, 61, by=0.5), 50, replace=T)
Bowfin.weight <- sample(seq(1.36, 3.2, by=0.5), 50, replace=T)
Carp.length <- sample(seq(30, 75, by=1), 50, replace=T)
Carp.weight <- sample(seq(0.2, 3.5, by=0.1), 50, replace=T)
Goldeye.length <- sample(seq(25, 38, by=0.5), 50, replace=T)
Goldeye.weight <- sample(seq(0.4, 0.54, by=0.01), 50, replace=T)
Largemouth_Bass.length <- sample(seq(22, 55, by=0.5), 50, replace=T)
Largemouth_Bass.weight <- sample(seq(0.68, 1.8, by=0.01), 50, replace=T)
weight <-c(Bluegill.weight, Bowfin.weight, Carp.weight, Goldeye.weight, Largemouth_Bass.weight)
length <-c(Bluegill.length, Bowfin.length, Carp.length, Goldeye.length, Largemouth_Bass.length)
speed <- rnorm(50*5, 7.2, sd=1.8)
fish <- c(rep("Bluegill", 50), rep("Bowfin", 50), rep("Carp", 50), rep("Goldeye", 50), rep("Largemouth_Bass", 50))
fish.data <- data.frame(length, weight, speed, fish)
str(fish.data)
plot3DfishData <- function(x, y, z, data=fish.data){
require("scatterplot3d")
#To store the axis labels
fish.variable <- colnames(data)
scatterplot3d(data[, x], data[, y], data[, z], color =  c("blue", "black", "red", "green", "turquoise")[data$fish], pch = 19,   xlab=fish.variable[x], ylab=fish.variable[y], zlab=fish.variable[z])
}
library(MASS)
fish.lda <- lda(fish ~ ., data=fish.data, prior=c(1,1,1,1,1)/5)
fish.lda
fish.lda$counts
fish.lda$svd
set.seed(10)
train100 <- sample(1:nrow(fish.data), 100)
table(fish.data$fish[train100])
fish100.lda <- lda(fish ~., data=fish.data, prior=c(1,1,1,1,1)/5, subset=train100)
predict.fish100 <- predict(fish100.lda)
table(fish.data$fish[train100], predict.fhsh100$class)
table(fish.data$fish[train100], predict.fish100$class)
set.seed(1)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each=5)
x
e <- rnorm(10, 0 ,20)
y <- 0.5 + 2*x + e
plot(x,y)
require(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
install.packages("swirl")
require(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 10000
info()
z * 2 + 10000
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("./testdir")
setwd("testdir")
getwd()
setwd("..")
setwd("testdir")
info()
getwd()
setwd("./Documents/")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path('mytest3.R')
file.path('folder1','folder2')
?dir.create
dir.create('testdir2', file.path('testdir2','testdir3'), recursive=T)
dir.create(file.path('testdir2','testdir3'), recursive=T)
dir.create(file.path('testdir2','testdir3'), recursive=TRUE)
unlink('testdir2',recursive=TRUE)
setwd(old.dir)
unlink(testdir, recursive=T)
getwd()
unlink("testdir", recursive=T)
unlink("testdir", recursive=TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse=" ")
my_name <- c(my_char, "Jae")
my_char
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep="-")
source("http://bioconductor.org/biocLite.R")
biocLite("ddCt")
q()
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url, destfile="first.csv")
data <- read.csv("first.csv")
head(data)
dim(data)
str(data)
sum(data$VAL == 24)
data$VAL
sum(data$VAL == 24, na.rm=TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url, "second.xlsx")
install.packages("xlsx")
require(xlsx)
require(xlsx)
require(rJava)
require(xlsx)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url, "second.xlsx")
?read.xlsx
dat <- read.xlsx("second.xlsx", rowIndex=18:23, colIndex=7:15)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url)
download.file(url, dest="second.xlsx")
?rread.xlsx
?read.xlsx
dat <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", sheetIndex=1, rowIndex=18:23, colIndex=7:15)
dat
sum(dat$Zip*dat$Ext, na.rm=T)
require(XML)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(url, useInternal=TRUE)
download.file(url, dest="third.xml")
xmldoc <- xmlTreeParse("third.xml", useInternal=TRUE)
head(xmldoc)
xmldoc
rootnode <- xmlRoot(xmldoc)
xmlSapply(rootnode, "21231")
xmlSApply(rootnode, "21231")
xmlSApply(rootNode, xmlValue)
xmlSApply(rootnode, xmlValue)
class(xmlSApply(rootnode, xmlValue))
length(xmlSApply(rootnode, xmlValue))
require(stringr)
str_count(xmlSApply(rootnode, xmlValue), "21231")
install.packages("data.table")
require(data.table)
?fread
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", dest="fifth.csv")
DT <- fread("fifth.csv")
head(DT)
DT[,mean(pwgtp15),by=SEX]
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "8bbc49a9621e48335b4d",
secret = "0e7bb8d1c9ae9dfd257de891dfa3f5afd8283528")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "8bbc49a9621e48335b4d",
secret = "0e7bb8d1c9ae9dfd257de891dfa3f5afd8283528")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
setwd("C:/Users/jae/Documents/GitHub/RepData_PeerAssessment1/")
activity_data <- read.csv("activity.csv")
steps_per_day <- aggregate(steps~date, data=activity_data, FUN=mean, na.rm=T)
mean(steps_per_day$steps)
head(steps_per_day)
weekdays(as.Date(steps_per_day$date))
